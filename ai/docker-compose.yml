services:
  cloudflared-tavern:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_tavern
    hostname: cloudflared_tavern
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    extra_hosts:
      - host.docker.internal:host-gateway 
    command: tunnel run             
    environment:
      TUNNEL_TOKEN: ${TAVERN_TOKEN}

  cloudflared-webui:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_webui
    hostname: cloudflared_webui
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    extra_hosts:
      - host.docker.internal:host-gateway        
    command: tunnel run        
    environment:
      TUNNEL_TOKEN: ${WEBUI_TOKEN}

  cloudflared-mysqlbk:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_mysqlbk
    hostname: cloudflared_mysqlbk
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    extra_hosts:
      - host.docker.internal:host-gateway
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${MYSQLBK_TOKEN}

  cloudflared-mysqlfr:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_mysqlfr
    hostname: cloudflared_mysqlfr
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    extra_hosts:
      - host.docker.internal:host-gateway
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${MYSQLFR_TOKEN}

  cloudflared-cbsqlbk:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_cbsqlbk
    hostname: cloudflared_cbsqlbk
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    extra_hosts:
      - host.docker.internal:host-gateway
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${CBSQLBK_TOKEN}

  cloudflared-cbsqlfr:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_cbsqlfr
    hostname: cloudflared_cbsqlfr
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    extra_hosts:
      - host.docker.internal:host-gateway
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${CBSQLFR_TOKEN}

  cloudflared-kcpp:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_kcpp
    hostname: cloudflared_kcpp
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    extra_hosts:
      - host.docker.internal:host-gateway
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${KCPP_TOKEN}

  rvc:
    build:
      context: ./rvc
      dockerfile: Dockerfile
    container_name: rvc
    hostname: rvc
    pull_policy: always
    tty: true
    restart: unless-stopped
    volumes:
      - rvc:/app:/rw
      - rvc-dataset:/app/dataset:/rw
    ports:
      - 7865:7865
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      - ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  koboldcpp:
    container_name: koboldcpp
    volumes:
      - koboldcpp:/workspace/:rw
    ports:
      - '7860:7680'
    image: 'koboldai/koboldcpp:latest'
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      - KCPP_MODEL=https://huggingface.co/DavidAU/Llama-3.2-8X4B-MOE-V2-Dark-Champion-Instruct-uncensored-abliterated-21B-GGUF/resolve/a09adaf5cafd148ea8084dc095b35e5d07a79ac4/L3.2-8X4B-MOE-V2-Dark-Champion-Inst-21B-uncen-ablit-D_AU-q5_k_m.gguf?download=true # Remove this line if you wish to supply your own model offline
      - KCPP_DONT_REMOVE_MODELS=true
      - KCPP_DONT_UPDATE=false
      - KCPP_DONT_TUNNEL=true
      - KCPP_ARGS=--model model.gguf --skiplauncher --flashattention --usecublas --gpulayers 99 --multiuser 5 --quiet --websearch --threads 8 --contextsize 8192
      - CUDA_DOCKER_ARCH=true
      - LLAMA_PORTABLE=true    
    ulimits:
      memlock: -1
    mem_limit: 50gb
    tty: true
    pull_policy: always
    restart: unless-stopped
    networks:
      - cloudflare-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ] 

  tika:
    build: ./tika
    container_name: tika
    hostname: tika
    pull_policy: always
    image: apache/tika:latest
    tty: true
    restart: unless-stopped
    ports:
      - "9998:9998"
    volumes:
      - tika:/opt/tika:/rw
      - tika-inputs:/opt/tika/inputs:/rw
      - tika-outputs:/opt/tika/outputs:/rw
    depends_on:
      - ollama
    extra_hosts:
      - host.docker.internal:host-gateway

  sillytavern:
    container_name: sillytavern
    hostname: sillytavern
    image: ghcr.io/sillytavern/sillytavern:latest
    pull_policy: always
    environment:
       - NODE_ENV=production
       - FORCE_COLOR=1
    ports:
       - 8950:8950
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - sillytavern-config:/home/node/app/config:/rw
      - sillytavern-data:/home/node/app/data:/rw
      - sillytavern-plugins:/home/node/app/plugins:/rw
      - sillytavern-3rdparty:/home/node/app/public/scripts/extensions/third-party:/rw
    tty: true
    restart: unless-stopped
    depends_on:
      - ollama
    networks:
      - cloudflare-network

  ollama:
    volumes:
      - ollama:/root/.ollama:/rw
    container_name: ollama
    pull_policy: always
    tty: true
    restart: always
    image: ollama/ollama:latest
    ports: 
      - 11434:11434
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - cloudflare-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]  

  open-webui:
    build:
      context: ./open-webui
      args:
        OLLAMA_BASE_URL: '/ollama'
      dockerfile: Dockerfile
    image: ghcr.io/open-webui/open-webui:ollama
    container_name: open-webui
    hostname: open-webui
    pull_policy: always
    tty: true
    volumes:
      - open-webui:/app/backend/data:/rw
    depends_on:
      - ollama
    ulimits:
      memlock: -1
    mem_limit: 50gb
    ports:
      - 8080:8080
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_KEY}
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
    networks:
      - cloudflare-network

  kokoro-tts-cpu: 
    build: 
      context: ./Kokoro-FastAPI
      dockerfile: /docker/cpu/Dockerfile
    container_name: kokoro-tts-cpu
    hostname: kokoro-tts-cpu
    volumes:
      - kokoro:/app:/rw
      - kokoro-api:/app/api:/rw
      - kokoro-models:/api/src/models/v1_0:/rw
      - kokoro-voices:/api/src/voices/v1_0:/rw
    ports:
      - "5433:5433"
    pull_policy: always
    environment:
      - PYTHONPATH=/app:/app/api
      - ONNX_NUM_THREADS=8  
      - ONNX_INTER_OP_THREADS=4  
      - ONNX_EXECUTION_MODE=parallel
      - ONNX_OPTIMIZATION_LEVEL=all
      - ONNX_MEMORY_PATTERN=true
      - ONNX_ARENA_EXTEND_STRATEGY=kNextPowerOfTwo'
    extra_hosts:
      - host.docker.internal:host-gateway
    tty: true
    restart: unless-stopped
    depends_on:
      - ollama
    networks:
      - cloudflare-network

  mysql-db:
    image: mysql
    container_name: mysql
    hostname: mysql
    pull_policy: always
    tty: true
    volumes:
      - mysql:/var/lib/mysql:/rw
    ulimits:
      memlock: -1
    mem_limit: 50gb
    ports:
      - 8990:8990
    expose: 
      - 8990
    environment:
      - MYSQL_ROOT_PASSWORD=$(MYSQL_PW)
      - MYSQL_DATABASE=${MYSQL_DB}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PW}
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: always
    networks:
      - cloudflare-network

  phpmyadmin:
    image: phpmyadmin
    restart: unless-stopped
    container_name: phpmyadmin
    hostname: phpmyadmin
    pull_policy: always
    tty: true
    ports: 
      - 8979:8979
    volumes:
      - phpmyadmin:/app:/rw
    environment:
      - PMA_ARBITRARY=0
      - PMA_PORT=8990
      - PMA_CONTROLUSER=$(MYSQL_USER)
      - PMA_CONTROLPASS=$(MYSQL_PW)
    depends_on:
      - mysql-db
    networks:
      - cloudflare-network


  postgres-db:
    restart: always
    hostname: postgres
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data:/rw
    pull_policy: always
    tty: true
    ulimits:
      memlock: -1
    mem_limit: 50gb
    environment:
      - POSTGRES_DB=${MYSQL_DB}
      - POSTGRES_USER=${MYSQL_USER}
      - POSTGRES_PASSWORD=${MYSQL_PW}
    ports:
      - 5432:5432
    expose: 
      - 5432
    extra_hosts:
     - host.docker.internal:host-gateway
    networks:
      - cloudbeaver-private-net    
      - cloudflare-network

  CloudBeaver:
    image: dbeaver/cloudbeaver
    container_name: CloudBeaver
    hostname: CloudBeaver
    pull_policy: always
    tty: true
    volumes:
      - cloudbeaver:/opt/cloudbeaver/workspace:/rw
      - cloudbeaver_certs:/opt/cloudbeaver/conf/certificates:/rw
      - trusted_cacerts:/opt/cloudbeaver/workspace/.data/custom:/rw
    ulimits:
      memlock: -1
    mem_limit: 50gb
    ports:
      - 8978:8978
    deploy:
      replicas: 1
    environment:
      - CLOUDBEAVER_DB_DRIVER=postgres-jdbc
      - CLOUDBEAVER_DB_URL=jdbc:postgresql://postgres:5432/cloudbeaver
      - CLOUDBEAVER_DB_USER=${MYSQL_USER}
      - CLOUDBEAVER_DB_PASSWORD=${MYSQL_PW}
      - CLOUDBEAVER_DB_SCHEMA=cb
      - CLOUDBEAVER_QM_DB_DRIVER=postgres-jdbc
      - CLOUDBEAVER_QM_DB_URL=jdbc:postgresql://postgres:5432/cloudbeaver
      - CLOUDBEAVER_QM_DB_USER=${MYSQL_USER}
      - CLOUDBEAVER_QM_DB_PASSWORD=${MYSQL_PW}
      - CLOUDBEAVER_QM_DB_SCHEMA=qm
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
    depends_on:
      - postgres-db
    networks:
      - cloudbeaver-private-net
      - cloudflare-network

  portainer:
    build:
      context: ./portainer
    image: portainer/portainer-ce:latest
    container_name: portainer
    hostname: portainer
    volumes:
      - portainer:/app:/rw
    ports:
      -  9001:9001
      -  9443:9443
    extra_hosts:
      - host.docker.internal:host-gateway

  pipeline:
    image: ghcr.io/open-webui/pipelines:main
    container_name: pipeline
    restart: unless-stopped
    volumes:
      - pipelines:/app:/rw
    ports:
      - 9099:9099
    extra_hosts:
      - host.docker.internal:host-gateway

networks:
  cloudflare-network:
  cloudbeaver-private-net:
  
volumes:
  open-webui: {}        #8080
  ollama: {}            #11434     
  sillytavern-config: {} #9001
  sillytavern-data: {}
  sillytavern-plugins: {}
  sillytavern-3rdparty: {}
  tika: {}              #9998
  tika-inputs: {}
  tika-outputs: {}
  pipelines: {}         #9099
  kokoro: {}            #8880
  kokoro-api: {}
  kokoro-models: {}
  kokoro-voices: {}
  portainer: {}         #8188 9443
  rvc: {}               #7865
  rvc-dataset: {}
  mysql: {}             #8990 (swap with postgres)
  phpmyadmin: {}
  cloudbeaver: {}       #8978 (sql frontend for postgres)
  cloudbeaver_certs: {}
  trusted_cacerts: {}
  postgres_data: {}     #5432 (sql backend for cloudbeaver)
  koboldcpp: {}